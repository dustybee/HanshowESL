/********************************************************************************************************
 * @file     boot.link
 *
 * @brief    This file tells the linker how to link the compiled object files and libraries
 *
 * @author   Driver Group
 * @date     May 8, 2018
 *
 * @par      Copyright (c) 2018, Telink Semiconductor (Shanghai) Co., Ltd.
 *           All rights reserved.
 *           
 *           The information contained herein is confidential property of Telink 
 *           Semiconductor (Shanghai) Co., Ltd. and is available under the terms 
 *           of Commercial License Agreement between Telink Semiconductor (Shanghai) 
 *           Co., Ltd. and the licensee or the terms described here-in. This heading 
 *           MUST NOT be removed from this file.
 *
 *           Licensees are granted free, non-transferable use of the information in this 
 *           file under Mutual Non-Disclosure Agreement. NO WARRENTY of ANY KIND is provided. 
 * @par      History:
 * 			 1.initial release(DEC. 26 2018)
 *
 * @version  A001
 *            
 *******************************************************************************************************/

/* to tell the linker the program begin from __start label in cstartup.s, thus do not treat it as a unused symbol */
ENTRY(__start)

SECTIONS
{
    . = 0x0;
    .vectors :
    {
    *(.vectors)
    *(.vectors.*)	/* MUST as follows, when compile with -ffunction-sections -fdata-sections, session name may changed */
    }
    .ram_code :
    {
    *(.ram_code)
    *(.ram_code.*)
    }
	PROVIDE(_ramcode_size_ = . );
	PROVIDE(_ramcode_size_div_16_ = (. + 15 ) / 16);
	PROVIDE(_ramcode_size_div_256_ = (. + 255) / 256);
	PROVIDE(_ramcode_size_div_16_align_256_ = ( (. + 255) / 256) * 16);
	PROVIDE(_ramcode_size_align_256_ = ( (. + 255) / 256) * 256);

    . =  _ramcode_size_align_256_ ; /* >= (_ictag_start_ - 0x840000)*/
	
	.text :
	    {
	    *(.text)
	    *(.text.*)
	    }
	.rodata :
	    {
	    *(.rodata)
	    *(.rodata.*)
	    }
	
	. = (((. + 3) / 4)*4);
		PROVIDE(_rstored_ = . );
	    PROVIDE(_code_size_ = .);
	/*. = 0x840000 + _rstored_ ;	/* for MCU RUN IN SRAM */ 
	
	. = (0x840900 + _ramcode_size_align_256_ );	/* for MCU RUN IN Flash 0x100 alighned, must greater than or equal to:0x808000 + ram_code_size +  irq_vector(0x100) + IC_tag(0x100) + IC_cache(0x800) == 0x808a00 + ram_code_size */

	    .retention_data :
	      AT ( _rstored_ )
	    {
	    . = (((. + 3) / 4)*4);
	    PROVIDE(_retention_data_start_ = . );
	    *(.retention_data)
	    *(.retention_data.*)
	    . = (((. + 3) / 4)*4);
	    PROVIDE(_retention_data_end_ = . );     
	    } 
        PROVIDE(_dstored_ = _rstored_ + _retention_data_end_ - _retention_data_start_); 
	    
	    .data :
	      AT ( _dstored_ )
	     {
	. = (((. + 3) / 4)*4);
	     PROVIDE(_start_data_ = . );
	     *(.data);
	     *(.data.*);
	. = (((. + 3) / 4)*4);
	     PROVIDE(_end_data_ = . );
	     }
	
	    .bss :
	    {
	. = (((. + 3) / 4)*4);
		PROVIDE(_start_bss_ = .);
	    *(.sbss)
	    *(.sbss.*)
	    *(.bss)
	    *(.bss.*)
	    }
		PROVIDE(_end_bss_ = .);
		PROVIDE(_bin_size_ = _code_size_ + _end_data_ - _start_data_ + _retention_data_end_ - _retention_data_start_ );
		PROVIDE(_bin_size_div_16 = ( _bin_size_ + 15 ) / 16 );
		PROVIDE(_ictag_start_ = 0x840000 + _ramcode_size_align_256_ );
		PROVIDE(_ictag_end_ = 0x840000 + _ramcode_size_align_256_ + 0x100);
}